
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "HRQoL"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "HRQoL-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('HRQoL')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BB")
> ### * BB
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB
> ### Title: The Beta-Binomial Distribution
> ### Aliases: dBB rBB
> ### Keywords: stats
> 
> ### ** Examples
> 
> set.seed(12)
> # We define
> n <- 10     #maximum number of scores in the binomial trials
> p <- 0.4    #probability parameter of the beta-binomial distribution
> phi <- 1.8  #dispersion parameter of the beta-binomial distribution
> 
> # We perform k beta-binomial simulations for those parameters.
> k <- 100
> bb <- rBB(k,n,p,phi)
> 
> # Show the histogram of the generated variable,
> #with dBB() function we fit a beta-binomial distribution:
> hist(bb,col="grey",breaks=seq(-0.5,n+0.5,1),probability=TRUE,main="Histogram",xlab="beta-binomial random variable")
> lines(c(0:n),dBB(0:n,n,p,phi),col="red",lwd=4)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BBest")
> ### * BBest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BBest
> ### Title: Estimation of the parameters of beta-binomial distribution
> ### Aliases: BBest BBest
> 
> ### ** Examples
> 
> # We simulate beta-binomial distributed observations.
> n <- 10     # maximum score of the Binomial trials 
> k <- 1000   # number of simulated observations
> p <- 0.7    # probability parameter of the beta-binomial distribution
> phi <- 1.6  # dispersion parameter of the beta-binomial distribution
> 
> set.seed(5)
> y <- rBB(k,n,p,phi)
> 
> # Estimation
> est <- BBest(y,n)
> print(est)
Number of trial in the beta-binomial distribution: 10 
The probability parameter of the beta-binomial distribution: 0.7124 
The dispersion parameter of the beta-binomial distribution: 1.629547 
> 
> # Summary of the results
> summary(est)
Call:	BBest(y = y, n = n)

Probability parameter estimation:
     Estimate      StdErr
[1,]   0.7124 0.008193293

Dispersion parameter estimation:
     Estimate     StdErr
[1,] 1.629547 0.04484359

Number of trials in the beta-binomial model: 10> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BBest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BBreg")
> ### * BBreg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BBreg
> ### Title: Fitting Beta-Binomial Regression Models
> ### Aliases: BBreg BBreg
> 
> ### ** Examples
> 
>   # We will generate a beta-binomial response variable fixing some values of 
>   # the regression parameters and simualting a random effect. Then we are going
>   # to proof that we reach the same values.
>   
>   # We generate the outcome variable fromm a simulated covariable.
>   set.seed(11)
>   k <- 100
>   n <- 10
>   x <- rnorm(k,5,3)
>   
>   # We calculate the probability parameter as in the proposed methodology.
>   p <- 1/(1+exp(-(2*x-10)))
>   phi <- 1.2
>   
>   # We simualte a beta-binomial variable for those parameters.
>   y <- rBB(k,n,p,phi)
>   
>   # We perform the beta binomial regression, reaching very similar values
>   BBreg(y~x,n)
Call:	BBreg(formula = y ~ x, n = n)

Beta coefficients:
     Intercept        x
[1,] -10.20863 2.132739

Dispersion parameter (log): 0.3878634 

Deviance: 123.3826  on  97  degrees of freedom
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BBreg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BI")
> ### * BI
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BI
> ### Title: The Binomial distribution with Dispersion Parameter
> ### Aliases: dBI rBI
> ### Keywords: stats
> 
> ### ** Examples
> 
> k <- 1000
> n <- 10
> p <- 0.765
> phi <- 4.35
> 
> #simulating
> y <- rBI(k,n,p,phi)
> y
   [1]  4  5  7 10  4  9 10  8  7  1  4  3  8  5  8  6  8 10  5  8 10  4  8  3
  [25]  4  5  0  5  9  5  6  7  6  3  9  8  9  2  8  6  9  7  9  7  7  9  0  6
  [49]  8  8  6  9  6  4  2  2  5  6  8  6 10  5  6  5  7  4  6  8  2  9  5  9
  [73]  5  5  6  9  9  5  8 10  6  8  5  5  8  4  8  2  4  3  4  1  7  9  8  9
  [97]  6  6  9  7  8  5  4 10  7  4  3  6 10  7 10  8  5  6  3  0  8  2  6  7
 [121] 10  6  6  3  8  6  6  4  4  7  7  2  1  7 10  7  7  7 10  6  8  7  4  4
 [145]  8  6  3  8  2  9  7  7  5  6  6  3  7  2  4  4  4  9  6  8  9  6  1  5
 [169]  8  5  7  9  9  5  5  9  7  8  7  9  5  3  9  6  9  3  8  8 10  7  8  5
 [193]  2 10  4  7  2  9  5  9  4  4  6  4  3  6  7  3  4  8 10  2  8 10  9  5
 [217]  7 10 10  5  4  3  5  6 10  6  4  1  6  9  5  3  5  7  5  8  8  7  6  6
 [241]  5  7 10  3  6  4  6  3  6 10  8 10  6  7  6  2  4  6  5 10  7  5  4  9
 [265]  8  3  1  8  7  3  1  2  5  3  5  3  4  3  6  8  1  7  9  5  1  3  5  3
 [289]  3  4  4  3 10  5  6  8  2  2  1 10  8  2  6  6  5 10  3  9  2  6  3  3
 [313]  9  8  4  6  2  5 10  7  8  5  6 10  9 10  9  9  4  8 10  5  5  9  2  5
 [337]  6  3  7 10 10  3  7  5  8  4  6  3  5  8  6  1  9  6 10  4  9  2  9  6
 [361]  2  5  9  4  7  9  2  8  8  6  6  7 10  4  4  6  5  9  3  6  6  7  8 10
 [385]  4  4  9  9  2 10  3  3 10  6  3  5  8  5  5  3  8  3 10  9 10  8  5  8
 [409]  0 10 10  5  8  9  8  6  6  5  8  9  6  6  8  3  5  6  2 10  9  9 10  2
 [433]  5  7  2  9  8  1  6 10  1  5  6  7  4  6  5 10  2  2 10  6  5  3  1  8
 [457]  7 10  7  1  3  6  0  6  4 10  8  3  6  8  6 10  8  5  2  4  9  6  6  8
 [481]  8  3  9 10  7  6  3  0  9  3  0 10  5  3  5  6  6  6  9  1  7  8  8  8
 [505]  6 10  6  9  8  7  9  6  0  8  8  3  7  7  5  7  9  8  5  3  5 10  9  8
 [529] 10 10  7  1  5  4  2  1  5  5  3  7  5 10  8  5  3  2 10  5  7  8  9  7
 [553]  0 10  8  5  2  1  9  9  8  3  5  8 10  8  4  7  4 10  3  6  4  2  9  7
 [577]  8  6  9  8  5 10  7  1  7  6  2  7 10  8  7  4  8  8  9  7  6  6  5  6
 [601]  9 10  3  8 10 10  5  5 10  2 10  5  7  7  8  6  3  5  7  1  9  4  7  3
 [625]  5  7  4  7  6 10  9  5  5  9  6  5  2  1  8  8 10  5 10  4  9  4  1  9
 [649]  8 10  8  9  5  5  7  2  3  7  8  9  5  9  1  7  5  7 10  4  5  8  8  7
 [673]  9  7  6  6  5  2  5  4  8  8  3  6  7  6  5  6  0 10  2  6  9  7  6  7
 [697]  9  3 10  6 10  9  8  8  7  2  6  7 10  8  8  6  2  9  6  6  1  3  6  8
 [721]  0  7 10  8  4  9  5  7  6  1  8  7  8  1  8  5  4  9  2  1  5  7  7  4
 [745]  4  5  6  9  2  8  6  9  7  3  6  3  6  4 10  6  8  3  9  4  3  3  7  8
 [769]  9  8  6  9  0 10  7  6  1  8  4 10 10  8  8  6  9  3  7  5  6  1  3  1
 [793] 10  5  6  7  4  6  9  5  9  1 10  8  4  8  5 10  5  1  5  5  5 10  5  7
 [817] 10 10  4  8  5  7  8  9  9  1  4  5  5  8  8 10  9  8  6  7  2  9 10  6
 [841] 10  3  4  6  6  6  1  7  8  5 10  8  1 10  4  1  4  8  4  4  0  4  8  1
 [865]  1  5  6  7  8  2  6 10  9  4  6  0  4  6  8 10  5 10 10  9  6  9  9  8
 [889]  7  5  0  1  2  0  5  2  7  1  0  3  9  8  4  3  4  1  1  3  2  1  7  9
 [913]  8  2  0  6  3  8  8  9  5 10 10  1  9  9  8  4  6  6  7 10  4  4  8  8
 [937] 10  6  9  5  4 10  1  6  6  6  8  8 10  9  2  3  7  9  7  4  9  3  6  0
 [961]  5  6  3  7  5  4  5  9 10  8 10  7  6 10  3  2  0  7  8  9  3  3 10  5
 [985]  3  6  7  5 10  7  3  6  7  4  3  8  7  4  3  4
> 
> #density function
> d <- dBI(n,p,phi)
> d
 [1] 0.02480900 0.04128629 0.05784186 0.07521464 0.09252189 0.10844629
 [7] 0.12136182 0.12941291 0.13054344 0.12222394 0.09633791
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BI", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BIMreg")
> ### * BIMreg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BIMreg
> ### Title: Generalized Linear Mixed Models (GLMMs) for binomial data
> ### Aliases: BIMreg
> ### Keywords: matrixcalc, rootSolve
> 
> ### ** Examples
> 
> set.seed(5)
> # Creating the dependent variable with a simulated covariable:
> nObs <- 500
> x <- rnorm(nObs,4,1) 
> id1 <- c(kronecker(seq(1,5),rep(1,100)))
> id2 <- c(kronecker(seq(1,10),rep(1,50)))
> 
> 
> p <- 1/(1+exp(-(5-5*x+kronecker(rnorm(5,0,0.5),rep(1,100))+kronecker(rnorm(10,0,1.2),rep(1,50)))))
> y <- rbinom(nObs,10,p)
> dat <- data.frame(cbind(y,x,id1,id2))
> dat$id1 <- as.factor(dat$id1)
> dat$id2 <- as.factor(dat$id2)
> 
> #Estimating the mixed model for one random component.
> mm1 <- BIMreg(y~x,10,c("id1"),dat)
> mm1
Call:BIMreg(formula = y ~ x, n = 10, random = c("id1"), data = dat)

Fixed effects:
Coefficients:
     (Intercept)         x
[1,]    4.717186 -4.178623

Random effects:
Number of random components: 1 
Number of groups in each random component: 5
Std. Error(s): 0.4026319 
> summary(mm1)
Call:	BIMreg(formula = y ~ x, n = 10, random = c("id1"), data = dat)

Fixed effects coefficients:

            Estimate   StdErr t.value p.value    
(Intercept)  4.71719  0.81834  5.7643 8.2e-09 ***
x           -4.17862  0.49159 -8.5002 < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

---------------------------------------------------------------

Random effects standard error coefficients:

    Estimate StdError t.value p.value
id1  0.40263  0.45653  0.8819  0.3778

Number of random components: 1 
Number of clusters per random component: 5 

---------------------------------------------------------------

Number of observations: 500 
Deviance: Inf 

Number of iterations in IWLS: 41 

> 
> #Estimating the mixed model for two random components.
> mm2 <- BIMreg(y~x,10,c("id1","id2"),dat)
> mm2
Call:BIMreg(formula = y ~ x, n = 10, random = c("id1", "id2"), data = dat)

Fixed effects:
Coefficients:
     (Intercept)         x
[1,]     4.79861 -4.222876

Random effects:
Number of random components: 2 
Number of groups in each random component: 5 10
Std. Error(s): 0.1938001 0.4649575 
> summary(mm2)
Call:	BIMreg(formula = y ~ x, n = 10, random = c("id1", "id2"), data = dat)

Fixed effects coefficients:

            Estimate   StdErr t.value   p.value    
(Intercept)  4.79861  0.84922  5.6506 1.599e-08 ***
x           -4.22288  0.50697 -8.3296 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

---------------------------------------------------------------

Random effects standard error coefficients:

    Estimate StdError t.value p.value  
id1  0.19380  0.56299  0.3442 0.73067  
id2  0.46496  0.23466  1.9814 0.04755 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Number of random components: 2 
Number of clusters per random component: 5 10 

---------------------------------------------------------------

Number of observations: 500 
Deviance: Inf 

Number of iterations in IWLS: 38 

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BIMreg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BIest")
> ### * BIest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BIest
> ### Title: Estimation of the parameters of a binomial distribution
> ### Aliases: BIest BIest
> 
> ### ** Examples
> 
> set.seed(9)
> # We simulated the binomial data with some parameters and then
> # we are going to try to reach the same estimations.
> n <- 10             # the maximum score of the Binomial trials
> k <- 100            # number of simulations
> p <- 0.654          # probability parameter
> y <- rbinom(k,n,p)  # simulations
> 
> # without overdispersion
> BIest(y,n) #no overdispersion by default
         p         se    low.ic     up.ic
[1,] 0.653 0.01505294 0.6234962 0.6825038
> 
> # with overdispersion
> BIest(y,n,TRUE)
         p         se    low.ic     up.ic      phi
[1,] 0.653 0.01648109 0.6206971 0.6853029 1.198751
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BIest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BIreg")
> ### * BIreg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BIreg
> ### Title: Fit a logistic regression model
> ### Aliases: BIreg BIreg
> ### Keywords: HRQoL
> 
> ### ** Examples
> 
>   set.seed(1234)
>   # We simulate a covariable and we are going to construct the outcome
>   # variable usign the logit link function and the created covariable.
>   
>   n <- 10                       # maximum score of the Binomial trials
>   k <-100                       # number of observations
>   covariable <- rnorm(k,2,0.5)  # the covariable
>   
>   p <- 1/(1+exp(-(-6+4*covariable)))
>   outcome <- rbinom(k,n,p)
>   
>   # without dispersion parameter
>   bat <- BIreg(outcome~covariable,n,disp=FALSE)
>   summary(bat)
Call:
BIreg(formula = outcome ~ covariable, n = n, disp = FALSE)

            Estimate   StdErr t.value   p.value    
(Intercept) -6.06117  0.53227 -11.387 < 2.2e-16 ***
covariable   4.06923  0.31886  12.762 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Null deviance: 388.9452  on  99 degrees of freedom
Deviance: 72.63445  on  98 degrees of freedom
Deviance test: 0 

Number of iterations in IWLS: 6>   
>   # considering dispersion parameter
>   bi <- BIreg(outcome~covariable,n,disp=TRUE)
>   summary(bi)
Call:
BIreg(formula = outcome ~ covariable, n = n, disp = TRUE)

            Estimate   StdErr t.value   p.value    
(Intercept) -6.06117  0.42514 -14.257 < 2.2e-16 ***
covariable   4.06923  0.25468  15.978 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Dispersion parameter: 0.6379611 

Scaled Null deviance: 609.6691  on  99 degrees of freedom
Scaled deviance: 113.854  on  98 degrees of freedom
Deviance test: 0 

Number of iterations in IWLS: 6> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BIreg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HRQoL-package")
> ### * HRQoL-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HRQoL-package
> ### Title: Health Related Quality of Life Analysis
> ### Aliases: HRQoL-package HRQoL
> 
> ### ** Examples
> 
> set.seed(123)
> #  Number of observations
> k <- 100
> #  Maximun number of score in the binomial trials:
> n <- 10
> #  Probability:
> p <- 0.5
> #  Dispersion parameter:
> phi <- 2
> #  We simulate a overdispersed random variable following the beta-binomial distribution:
> y <- rBB(k,n,p,phi)
> 
> #  We calculate the mle of the parameters using the BIest function,
> #   binomial estimation with overdispersion:
> est <- BIest(y,n,disp=TRUE)
> est
         p         se    low.ic     up.ic     phi
[1,] 0.532 0.04087132 0.4518922 0.6121078 6.70934
> est.p <- est[1]
> est.phi <- est[5]
> 
> # If we plot it:
> hist(y,col="grey",breaks=seq(-0.5,10.5,1),probability = TRUE)
> lines(c(0:n),dBI(n,est.p,est.phi),col="red",lwd=4)
> 
> # Now we are going to calculate the mle of the parameters using
> # the BBest function, beta-binomial:
> out <- BBest(y,n)$coef
> out
      n     p      phi
[1,] 10 0.532 1.735014
> out.p <- out[2]
> out.phi <- out[3]
> # If we plot it:
> hist(y,col="grey",breaks=seq(-0.5,10.5,1),probability = TRUE)
> lines(c(0:n),dBB(0:n,n,out.p,out.phi),col="red",lwd=4)
> 
> #  Perform a regression:
> x <- rnorm(100,2,2)
> # Binomial with overdispersion distribution:
> BIreg(y~x,10,disp=TRUE)
Call:BIreg(formula = y ~ x, n = 10, disp = TRUE)

Coefficients:
     (Intercept)           x
[1,]   0.2173074 -0.04212359

Dispersion parameter: 6.772687 

Degrees of freedom: 99 Total ; 98 Residual
Scaled null deviance: 128.5448
Scaled deviance: 128.3192> # Beta-binomial regression:
> BBreg(y~x,n)
Call:	BBreg(formula = y ~ x, n = n)

Beta coefficients:
     Intercept           x
[1,]  0.215455 -0.03598601

Dispersion parameter (log): 0.4808087 

Deviance: 425.0621  on  97  degrees of freedom
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HRQoL-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HRQoLplot")
> ### * HRQoLplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HRQoLplot
> ### Title: Spider plot of the dimensions of the Short Form-36 Health Survey
> ### Aliases: HRQoLplot HRQoLplot
> ### Keywords: fmsb
> 
> ### ** Examples
> 
> set.seed(5)
> # We insert the columns in the order that has been determined:
> n <- c(4,3,20,20,8,9,20,13)
> k=3
> p=runif(8,0,1)
> phi <- runif(8,1,3)
> dat <- data.frame(
+   RP=rBB(k,n[1],p[1],phi[1]),
+   RE=rBB(k,n[2],p[2],phi[2]),
+   PF=rBB(k,n[3],p[3],phi[3]),
+   VT=rBB(k,n[4],p[4],phi[4]),
+   SF=rBB(k,n[5],p[5],phi[5]),
+   BP=rBB(k,n[6],p[6],phi[6]),
+   GH=rBB(k,n[7],p[7],phi[7]),
+   MH=rBB(k,n[8],p[8],phi[8]))
> 
> rownames(dat) <- c("ID1", "ID2", "ID3")
> HRQoLplot(dat,TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HRQoLplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IWLS")
> ### * IWLS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IWLS
> ### Title: Iterative Weighted Least Squares
> ### Aliases: IWLS IWLS
> 
> ### ** Examples
> 
> #we are going to create a variable and a matrix model
> k=1000                    #number of observations
> n=10                      #the maximum score of the binomial trials
> y <- rbinom(k,n,0.87)     #dependent variable
> x1 <- rnorm(k,1,50)       #covariable 1
> x2 <- rnorm(k,30,9)       #covariable 2
> X <- cbind(1,x1,x2)       #model matrix
> 
> IWLS(y,X,n)
$beta
            [,1]
    1.8963551098
x1  0.0004132323
x2 -0.0002786216

$vcov
                            x1            x2
    9.615806e-03  1.987806e-06 -2.920313e-04
x1  1.987806e-06  3.286295e-07 -5.509490e-08
x2 -2.920313e-04 -5.509490e-08  9.757909e-06

$iter
[1] 4

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IWLS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SF36rec")
> ### * SF36rec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SF36rec
> ### Title: Short Form-36 Helath Survey (SF-36) Recode
> ### Aliases: SF36rec SF36rec
> 
> ### ** Examples
> 
> set.seed(2)
> #We simulate a variable bounded between 0 and 100, and that only can take some values.
> BodyPain <- rnorm(1000,50,15)
> k <- 6  #Because the domain we are inserting is the Body Pain
> BodyPain.rec <- SF36rec(BodyPain,k)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SF36rec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.877 0.281 9.451 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
